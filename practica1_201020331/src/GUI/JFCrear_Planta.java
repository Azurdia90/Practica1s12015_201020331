package GUI;

import java.awt.Color;
import java.awt.Image;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 * @author Cristian
 * JFRAME QUE NOS PERMITE INGRESAR NUEVAS PLANTAS
 * INGRESAR ELEMENTOS A LA COLA
 * PODER MODIFICAR LA LISTA DE LAS PLANTAS
 */
public class JFCrear_Planta extends javax.swing.JFrame implements Runnable{
    
    //variable para cerrar el hilo de escritura de pantalla
    boolean parar;
    //objetos de las estructuras
    private estructuras.Raiz_Personaje raiz;
    private estructuras.Raiz_cola raiz_cola;
    private JFCrear_Zombie ventana1;
    private JFCrear_planta2 ventana2;
    //variables para el maenjo del inventario
    private int largo;
    private final int tamaño_label = 50;
    //matriz utilizada para poder graficar el inventario
    private JLabel[][]  inventario_plantas;
    private JButton[][] inventario_botones;
     //Hilo para actualizar la pantalla
    Thread inventario;
    //constructor de la clase
    public JFCrear_Planta() {
        initComponents();
        //raices de los objetos a utilizar
        raiz = new estructuras.Raiz_Personaje();
        raiz_cola = new estructuras.Raiz_cola();
        //enviar las raices para ser guardadas
        practica1_201020331.Logica_juego.setPlanta_juego(raiz_cola);
        practica1_201020331.Logica_juego.setPlanta(raiz);
        //determinar el largo de la matriz
        largo = practica1_201020331.Logica_juego.getJugador().getRaiz_jugador1().getCantidad();
        inventario_plantas = new JLabel[largo][5];
        inventario_botones = new JButton[largo][2];
        //empezar a enciclar el hilo
        parar = true;
        //correr el hilo
        inventario = new Thread(this);
        inventario.start();
    }//fin del contstructor

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBfin = new javax.swing.JButton();
        jBagregar = new javax.swing.JButton();
        jPinventario = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jBfin.setText("Finalizar");
        jBfin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBfinActionPerformed(evt);
            }
        });

        jBagregar.setText("Agregar");
        jBagregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBagregarActionPerformed(evt);
            }
        });

        jPinventario.setMaximumSize(new java.awt.Dimension(700, 32767));
        jPinventario.setMinimumSize(new java.awt.Dimension(700, 100));
        jPinventario.setPreferredSize(new java.awt.Dimension(700, 250));

        javax.swing.GroupLayout jPinventarioLayout = new javax.swing.GroupLayout(jPinventario);
        jPinventario.setLayout(jPinventarioLayout);
        jPinventarioLayout.setHorizontalGroup(
            jPinventarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
        jPinventarioLayout.setVerticalGroup(
            jPinventarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 382, Short.MAX_VALUE)
                .addComponent(jBagregar)
                .addGap(71, 71, 71)
                .addComponent(jBfin)
                .addGap(142, 142, 142))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPinventario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPinventario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBfin)
                    .addComponent(jBagregar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //metodo que corre lo requerrido en el hilo
    @Override
    public void run(){
        try{//encerramos las operaciones por si ocurre un error en el hilo
            while(parar){//enciclamos para que siemrpe este rescribiendo 
                crear_matriz();//creamos los encabezados de la matriz
                actualizar_matriz();//creamos los nodos que sean necesarios
                //this.update(this.getGraphics());
            }//fin del while
            Thread.sleep(10);//le damos tiempo al hilo para rescriba
            //System.exit(0);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "A ocurrido el siguiente error:  "
                        + e);
        }//fin del try catch
    }//fin del metodo
    
    private void jBfinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBfinActionPerformed
        parar = false;
        encolar();//pasar objetos a la cola
        practica1_201020331.Logica_juego.setPlanta(raiz);//guardar las raiz
        practica1_201020331.Logica_juego.setPlanta_juego(raiz_cola);//guardar la raiz
        this.dispose();//cerrar la ventana
    }//GEN-LAST:event_jBfinActionPerformed

    private void jBagregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBagregarActionPerformed
        ventana2 = new JFCrear_planta2(raiz);
        ventana2.show();

    }//GEN-LAST:event_jBagregarActionPerformed
    
    public void crear_matriz(){
        for(int x = 0; x < 7; x ++){
            JLabel encabezado = new JLabel();
            encabezado.setOpaque(true);
            encabezado.setBounds( (x*tamaño_label*2) , 0 ,tamaño_label*2, tamaño_label);
            encabezado.setVisible(true);
            encabezado.setBackground(Color.red);
            switch (x){
                    case 0:
                        encabezado.setText("IMAGEN");
                        break;
                    case 1:
                        encabezado.setText("NOMBRE");
                        break;
                    case 2:
                        encabezado.setText("ATAQUE");
                        break;
                    case 3:
                        encabezado.setText("DEFENSA");
                        break;
                    case 4:
                        encabezado.setText("TIPO_ATAQUE");
                        break;
                    case 5:
                        encabezado.setText("ELIMINAR");
                        break;
                    case 6:
                        encabezado.setText("MODIFICAR");
                        break;
            }
            jPinventario.add(encabezado);
        }//Fin del for para crear encabezados de matriz   
    }//fin del metodo para crear el encabezado de la matriz
    
    public void actualizar_matriz(){
        if(raiz.getCima() != null){
                mostrar_matriz();
        }
    }//fin del metodo actualizarmatriz()
    
    public void mostrar_matriz(){
        estructuras.Personaje aux = raiz.getCima();
        for(int y = 0; y < largo; y++){
            for(int x = 0; x < 5; x++ ){
                insertarmatriz(aux, x, y);
                insertarmatriz(x,y);
            }//fin for de las columnas
            aux = aux.getNext();
        }//fin for de las filas
    }//fin del metodo mostrar matriz
    
    public void insertarmatriz(estructuras.Personaje aux, int x, int y){
        inventario_plantas[y][x] = new JLabel();
        inventario_plantas[y][x].setOpaque(true);
        inventario_plantas[y][x].setBounds(x*(tamaño_label*2), 50*(y+1),(tamaño_label*2), tamaño_label);
        inventario_plantas[y][x].setVisible(true);
        inventario_plantas[y][x].setBackground(Color.white);
        switch(x){
            case 0:
                ImageIcon foto = new ImageIcon(aux.getImagen());
                Icon planta = new ImageIcon(foto.getImage().getScaledInstance(tamaño_label, tamaño_label,Image.SCALE_DEFAULT));
                inventario_plantas[y][x].setIcon(planta);
                break;
            case 1:
                inventario_plantas[y][x].setText(aux.getNombre());
                break;
            case 2:
                inventario_plantas[y][x].setText(Integer.toString(aux.getAtaque()));
                break;
            case 3:
                inventario_plantas[y][x].setText(Integer.toString(aux.getDefensa()));
                break;
            case 4:
                if(aux.isTipo_ataque() == true){
                    inventario_plantas[y][x].setText("directo");
                    break;
                }else{
                    inventario_plantas[y][x].setText("disparo");
                    break;
                }//fin del if del tipo de disparo         
        }//fin del switch  
        jPinventario.add(inventario_plantas[y][x]);
        this.repaint();
    }//fin del metodo insertar matriz
    
    public void insertarmatriz(int x, int y){
        if(x < 2){
            inventario_botones[y][x] = new JButton();
            inventario_botones[y][x].setBounds(500+(x*tamaño_label*2), 50*(y+1),(tamaño_label*2), tamaño_label);
            inventario_botones[y][x].setVisible(true);
            if(x == 0){
                inventario_botones[y][x].setText("Elmininar");
            }else{
                inventario_botones[y][x].setText("Modificar");
            }
            jPinventario.add(inventario_botones[y][x]);
            this.repaint();
        } 
    }
    //metodo que permite pasar copias de los personajes a la cola
    public void encolar(){
        //creamos un objeto del tipo cola
        estructuras.Cola cola = new estructuras.Cola(raiz_cola);
        estructuras.Personaje aux = raiz.getCola();
        while(aux != null){//recorremos la lista de atras para adelante
            cola.insertar(raiz_cola, aux.clone());//insertamos una copia
            aux = aux.getBack();//pasamos al nodo anterior;
        }//fin del ciclo while
    }//fin del metodo encolar
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBagregar;
    private javax.swing.JButton jBfin;
    private javax.swing.JPanel jPinventario;
    // End of variables declaration//GEN-END:variables
}
